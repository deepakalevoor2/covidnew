{"version":3,"file":"index.js","sources":["../../../../components/Link/index.tsx"],"sourcesContent":["import React from 'react';\nimport warning from 'warning';\nimport { Themed, Plain } from '../UIAction/index';\n\ninterface CommonProps {\n    to?: string;\n    shouldOpenInNewTab?: boolean;\n    children?: React.ReactNode;\n    isDisabled?: boolean;\n    onClick?: () => void;\n    dataTest?: string;\n    accessibilityLabel?: string;\n}\n\nconst getCommonLinkProps = (props: CommonProps): CommonProps => {\n    warning(\n        // If `onClick` prop exists then `to` must also exist.\n        !props.onClick || (props.to && props.onClick),\n        'The `onClick` prop in the Thumbprint `Link` and `ThemedLink` components should only be used when the `to` prop is also provided. Consider using the `Button` component instead.',\n    );\n\n    return {\n        to: props.to,\n        onClick: props.onClick,\n        shouldOpenInNewTab: props.shouldOpenInNewTab,\n        isDisabled: props.isDisabled,\n        children: props.children,\n        accessibilityLabel: props.accessibilityLabel,\n        dataTest: props.dataTest,\n    };\n};\n\n/**\n * Anchor link that renders as text.\n */\nconst Link = React.forwardRef<HTMLAnchorElement, LinkPropTypes>(\n    (\n        {\n            to,\n            onClick,\n            shouldOpenInNewTab = false,\n            isDisabled = false,\n            children,\n            accessibilityLabel,\n            dataTest,\n            theme = 'primary',\n            iconLeft,\n            iconRight,\n        }: LinkPropTypes,\n        ref,\n    ) => (\n        <Plain\n            {...getCommonLinkProps({\n                to,\n                onClick,\n                shouldOpenInNewTab,\n                isDisabled,\n                children,\n                accessibilityLabel,\n                dataTest,\n            })}\n            theme={theme}\n            iconLeft={iconLeft}\n            iconRight={iconRight}\n            ref={ref}\n        />\n    ),\n);\n\ninterface LinkPropTypes {\n    /**\n     * Contents displayed within the anchor.\n     */\n    children?: React.ReactNode;\n    /**\n     * Description of the link’s content. It is required if the link contains an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Functionally disables the anchor. We discourage the use of this prop since it is difficult\n     * to visually indicate that a link is disabled. Consider not rendering the link if it is not\n     * interactive.\n     */\n    isDisabled?: boolean;\n    /**\n     * Page to navigate to when the anchor is clicked.\n     */\n    to?: string;\n    /**\n     * Function to fire when clicking on the anchor. This should be used alongside the `to` prop.\n     */\n    onClick?: () => void;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left of the text within `Link`.\n     */\n    iconLeft?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right of the text within `Link`.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Opens the URL in a new tab when clicked.\n     */\n    shouldOpenInNewTab?: boolean;\n    /**\n     * Sets the anchor’s text color.\n     *\n     * `inherit` will make the anchor inherit `color` from its parent.\n     */\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'inherit';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTest?: string;\n}\n\n/**\n * Anchor link that visually looks like a button.\n */\nconst ThemedLink = React.forwardRef<HTMLAnchorElement, ThemedLinkPropTypes>(\n    (\n        {\n            to,\n            onClick,\n            shouldOpenInNewTab = false,\n            isDisabled = false,\n            children,\n            accessibilityLabel,\n            dataTest,\n            icon,\n            iconRight,\n            theme = 'primary',\n            size = 'large',\n            width = 'auto',\n        }: ThemedLinkPropTypes,\n        ref,\n    ) => (\n        <Themed\n            {...getCommonLinkProps({\n                to,\n                onClick,\n                shouldOpenInNewTab,\n                isDisabled,\n                children,\n                accessibilityLabel,\n                dataTest,\n            })}\n            icon={icon}\n            iconRight={iconRight}\n            theme={theme}\n            size={size}\n            width={width}\n            ref={ref}\n        />\n    ),\n);\n\ninterface ThemedLinkPropTypes {\n    /**\n     * Contents displayed within the button.\n     */\n    children?: React.ReactNode;\n    /**\n     * Description of the link’s content. It is required if the link contains an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Visually and functionally disables the button.\n     */\n    isDisabled?: boolean;\n    /**\n     * Page to navigate to when the anchor is clicked.\n     */\n    to?: string;\n    /**\n     * Function to fire when clicking on the anchor. This should be used alongside the `to` prop.\n     */\n    onClick?: () => void;\n    /**\n     * Opens the URL in a new tab when clicked.\n     */\n    shouldOpenInNewTab?: boolean;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left within the\n     * button. It must be one of the `small` icons.\n     */\n    icon?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right within the\n     * button. It must be one of the `small` icons.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Controls the button's background, text, and border theme.\n     */\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'caution' | 'solid';\n    /**\n     * Changes the button's `line-height`, `padding`, `border-radius`, and `font-size`.\n     */\n    size?: 'small' | 'large';\n    /**\n     * Themed links are as wide as the content that is passed in.  The `full` option will\n     * expand the width to `100%` on all screens. `full-below-small` will expand the width to 100%\n     * on devices smaller than [our `small` breakpoint](/tokens/#section-breakpoint).\n     */\n    width?: 'auto' | 'full' | 'full-below-small';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTest?: string;\n}\n\nexport default Link;\nexport { ThemedLink };\n"],"names":["getCommonLinkProps","props","warning","onClick","to","shouldOpenInNewTab","isDisabled","children","accessibilityLabel","dataTest","Link","React","forwardRef","ref","theme","iconLeft","iconRight","ThemedLink","icon","size","width"],"mappings":";;;;;;AAcA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAqC;EAC5DC,OAAO;GAEFD,KAAK,CAACE,OAAP,IAAmBF,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACE,OAFlC,EAGH,iLAHG,CAAP;SAMO;IACHC,EAAE,EAAEH,KAAK,CAACG,EADP;IAEHD,OAAO,EAAEF,KAAK,CAACE,OAFZ;IAGHE,kBAAkB,EAAEJ,KAAK,CAACI,kBAHvB;IAIHC,UAAU,EAAEL,KAAK,CAACK,UAJf;IAKHC,QAAQ,EAAEN,KAAK,CAACM,QALb;IAMHC,kBAAkB,EAAEP,KAAK,CAACO,kBANvB;IAOHC,QAAQ,EAAER,KAAK,CAACQ;GAPpB;CAPJ;;;;;;AAqBA,IAAMC,IAAI,GAAGC,KAAK,CAACC,UAAN,CACT,gBAaIC,GAbJ;MAEQT,EAFR,QAEQA,EAFR;MAGQD,OAHR,QAGQA,OAHR;mCAIQE,kBAJR;MAIQA,kBAJR,sCAI6B,KAJ7B;6BAKQC,UALR;MAKQA,UALR,gCAKqB,KALrB;MAMQC,QANR,QAMQA,QANR;MAOQC,kBAPR,QAOQA,kBAPR;MAQQC,QARR,QAQQA,QARR;wBASQK,KATR;MASQA,KATR,2BASgB,SAThB;MAUQC,QAVR,QAUQA,QAVR;MAWQC,SAXR,QAWQA,SAXR;SAeI,oBAAC,KAAD,eACQhB,kBAAkB,CAAC;IACnBI,EAAE,EAAFA,EADmB;IAEnBD,OAAO,EAAPA,OAFmB;IAGnBE,kBAAkB,EAAlBA,kBAHmB;IAInBC,UAAU,EAAVA,UAJmB;IAKnBC,QAAQ,EAARA,QALmB;IAMnBC,kBAAkB,EAAlBA,kBANmB;IAOnBC,QAAQ,EAARA;GAPkB,CAD1B;IAUI,KAAK,EAAEK,KAVX;IAWI,QAAQ,EAAEC,QAXd;IAYI,SAAS,EAAEC,SAZf;IAaI,GAAG,EAAEH;KA5Bb;CADS,CAAb;;;;;AAqFA,IAAMI,UAAU,GAAGN,KAAK,CAACC,UAAN,CACf,iBAeIC,GAfJ;MAEQT,EAFR,SAEQA,EAFR;MAGQD,OAHR,SAGQA,OAHR;oCAIQE,kBAJR;MAIQA,kBAJR,sCAI6B,KAJ7B;+BAKQC,UALR;MAKQA,UALR,iCAKqB,KALrB;MAMQC,QANR,SAMQA,QANR;MAOQC,kBAPR,SAOQA,kBAPR;MAQQC,QARR,SAQQA,QARR;MASQS,IATR,SASQA,IATR;MAUQF,SAVR,SAUQA,SAVR;0BAWQF,KAXR;MAWQA,KAXR,4BAWgB,SAXhB;yBAYQK,IAZR;MAYQA,IAZR,2BAYe,OAZf;0BAaQC,KAbR;MAaQA,KAbR,4BAagB,MAbhB;SAiBI,oBAAC,MAAD,eACQpB,kBAAkB,CAAC;IACnBI,EAAE,EAAFA,EADmB;IAEnBD,OAAO,EAAPA,OAFmB;IAGnBE,kBAAkB,EAAlBA,kBAHmB;IAInBC,UAAU,EAAVA,UAJmB;IAKnBC,QAAQ,EAARA,QALmB;IAMnBC,kBAAkB,EAAlBA,kBANmB;IAOnBC,QAAQ,EAARA;GAPkB,CAD1B;IAUI,IAAI,EAAES,IAVV;IAWI,SAAS,EAAEF,SAXf;IAYI,KAAK,EAAEF,KAZX;IAaI,IAAI,EAAEK,IAbV;IAcI,KAAK,EAAEC,KAdX;IAeI,GAAG,EAAEP;KAhCb;CADe,CAAnB;;;;;"}